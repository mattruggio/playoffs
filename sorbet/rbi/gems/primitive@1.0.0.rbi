# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `primitive` gem.
# Please instead update this file by running `bin/tapioca gem primitive`.

# source://primitive//lib/primitive/entity.rb#4
module Primitive; end

# Base class for uniquely identifiable classes.  Subclasses are simply based on a string-based ID
# and comparison/sorting/equality will be done in a case-insensitive manner.
#
# source://primitive//lib/primitive/entity.rb#7
class Primitive::Entity
  include ::Comparable

  # source://primitive//lib/primitive/entity.rb#15
  sig { params(id: ::String).void }
  def initialize(id = T.unsafe(nil)); end

  # source://primitive//lib/primitive/entity.rb#20
  sig { params(other: ::Primitive::Entity).returns(T.nilable(::Integer)) }
  def <=>(other); end

  # source://primitive//lib/primitive/entity.rb#25
  sig { params(other: ::Primitive::Entity).returns(T::Boolean) }
  def ==(other); end

  # source://primitive//lib/primitive/entity.rb#41
  sig { returns(::String) }
  def comparable_id; end

  # @param other [Entity]
  # @return [Boolean]
  #
  # source://sorbet-runtime/0.5.11368/lib/types/private/methods/_methods.rb#257
  def eql?(*args, **_arg1, &blk); end

  # source://primitive//lib/primitive/entity.rb#31
  sig { returns(::Integer) }
  def hash; end

  # source://primitive//lib/primitive/entity.rb#12
  sig { returns(::String) }
  def id; end

  # source://primitive//lib/primitive/entity.rb#36
  sig { returns(::String) }
  def to_s; end

  private

  # Sets the attribute id
  #
  # source://primitive//lib/primitive/entity.rb#48
  sig { params(id: ::String).returns(::String) }
  def id=(id); end
end
